#!/usr/bin/sh

SEARCH_PATH="$HOME/Music"
SEARCH_EXT="wav\|mp3\|flac\|ogg"

# If the image in the audio file is too small
MIN_WIDTH=480

ZIK_DIR="$HOME/.zik"
QUEUE="$ZIK_DIR/fifo"
COVERS="$ZIK_DIR/covers"
DAEMON_PID_FILE="$ZIK_DIR/daemon_pid"
FFPLAY_PID_FILE="$ZIK_DIR/ffplay_pid"

notif() {
    notify-send "Zik" "$1"
}

# Write file to fifo
# TODO: add directories
add() {
    if [ -f "$1" ]; then
        echo "$1" > "$QUEUE"
        notif "Added $1"
    fi
}

# dmenu prompt to select audio file to add to queue
menuadd() {
    add "$(find "$SEARCH_PATH/" -regex ".*\.\($SEARCH_EXT\)" | # Find audio files
        awk -F '/' '{printf "%-60s%s\n", $NF, $0}'           | # Rewrite as 'file   fullpath'
        dmenu -i -l 30 -p "Choose audio file"                | # Prompt user
        sed 's#^\([^/]*\)\(.*\)$#\2#'                          # Extract back the fullpath
    )"
}

# Send signal to the ffplay child process
# SIGSTOP and SIGCONT actually work pause/resume ffplay.
killffplay() {
    if [ -f "$FFPLAY_PID_FILE" ] && ps -p $(cat "$FFPLAY_PID_FILE") > /dev/null
    then
        kill $1 $(cat "$FFPLAY_PID_FILE")
    fi
}

# Get cover from the web. $1: artist, $2 album, $3 output path
wgetcover() {
    [ -z "$1" ] && [ -z "$2" ] && return 1

    # Find the MusicBrainz ID of the album
    # Look for <release-group id="xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
    URL="http://musicbrainz.org/ws/2/release-group/?query=artist:$1+release-group:$2&limit=1"
    MBID=$(wget -qO - "$URL" | sed -n 's/.*<release-group id="\([^"]*\)".*/\1/p')

    # Get image from coverartarchive.org
    # If wget fails (no image found) delete the empty file it made
    IMAGE_URL="https://coverartarchive.org/release-group/$MBID/front"
    if ! wget -qO "$3" "$IMAGE_URL"; then
        rm "$COVER"
        return 1
    fi
}

# Extract cover if it's not too small. $1: input, $2 output
extractcover() {
    WIDTH=$(ffprobe -v error -select_streams v:0 -show_entries stream=width -of default=nw=1:nk=1 "$1")
    if [ -z $WIDTH ] || [ $WIDTH -lt $MIN_WIDTH ]; then
        return 1
    fi
    ffmpeg -y -i "$1" -vframes 1 -f image2 "$2"
    return $?
}

# Find cover image $1: artist, $2: album, $3 audio file
wallpaper() {

    # If artist or album missing from metadata generate a filename
    if [ -n "$1" ] && [ -n "$2" ]; then
        COVER="$COVERS/$(\
            echo "$ARTIST-$ALBUM.jpg"   |
            tr '[:upper:]' '[:lower:]'  |
            tr -cd '[:alnum:]._-'
        )"
    else # Else save with the audio file name itself
        BASENAME=$(basename "$3")
        COVER="$COVERS/$BASENAME.jpg"
    fi

    # If doesn't exist already, extract from the audio file or get from the web
    if [ -f "$COVER" ] || 
        extractcover "$3" "$COVER" ||
        wgetcover "$1" "$2" "$COVER"
    then
        feh --no-fehbg --bg-max "$COVER"
    else
        notif "No cover found for $3"
    fi

}


# Run in the background when needed and stop swhen when the queue is empty.
daemon() {
    # Exit cleanly
    trap 'killffplay -TERM; exit' TERM INT EXIT QUIT

    # Open queue for reading : when doing read directly on $QUEUE the fifo is 
    # opened then closed so other processes trying to write are blocked.
    exec 3< "$QUEUE"

    # For each file in the queue do...
    # Exit the loop when everything has been read.
    while read -u 3 FILE; do
        [ -f "$FILE" ] || continue

        # Get metadata
        META=$(ffmpeg -v error -i "$FILE" -f ffmetadata -)
        ARTIST=$(echo "$META" | sed -n 's/^ARTIST=\(.*\)$/\1/Ip')
        ALBUM=$(echo  "$META" | sed -n 's/^ALBUM=\(.*\)$/\1/Ip')
        TITLE=$(echo  "$META" | sed -n 's/^TITLE=\(.*\)$/\1/Ip')
        TRACK=$(echo  "$META" | sed -n 's/^TRACK=\(.*\)$/\1/Ip')

        if [ -n "$TITLE" ]; then
            notif "Now playing $ARTIST - $TITLE" 
        else
            notif "Now playing $FILE"
        fi

        # Set cover as wallpaper (in the backgroud, wget can take a while)
        wallpaper "$ARTIST" "$ALBUM" "$FILE" &

        # Play it
        ffplay -nodisp -autoexit "$FILE" &
        FFPLAY_PID=$!
        echo $! > "$FFPLAY_PID_FILE"
        wait $!
    done

    # Closing queue
    notif "Queue empty, stopping"
    exec 3<&-
}


# Create the directories if they don't exist yet
mkdir -p "$ZIK_DIR"
mkdir -p "$COVERS"

# Create the music queue as an actual fifo
if [ ! -p "$QUEUE" ]; then
    mkfifo "$QUEUE"
fi

# Pid of the process is/will be playing
# FIXME: refactor the two cats ?
if [ -f "$DAEMON_PID_FILE" ] && ps -p $(cat "$DAEMON_PID_FILE") > /dev/null
then
    DAEMON_PID=$(cat "$DAEMON_PID_FILE")
else
    daemon > /dev/null 2>&1 < /dev/null &
    echo "$!" > "$DAEMON_PID_FILE"
    DAEMON_PID=$!
fi

USAGE="Usage: $0 [--help|add <file>|menu|skip|pause|resume|stop|reset]
    Without any option, a dmenu prompt is opened to choose one.

    Options:
    --help      Print this message.
    add <file>  Add the file to the queue.
    menu        Open a menu to choose a file to add..
    skip        Go to next in queue.
    pause       Pause playback.
    resume      Resume playback.
    stop        Empty the queue and stop playing.
    reset       Remove the fifo file (use if something went wrong)."
    #query       Print the status of what is beeing played."

# Prompt for option if none was given
if [ -z $1 ]; then
    OPTIONS="Menu Skip Pause Resume Stop"
    CHOICE=$(printf "%s\n" $OPTIONS |
        dmenu -i -p "Zik"           |
        tr '[:upper:]' '[:lower:]'
    )
else 
    CHOICE=$1
fi

case "$CHOICE" in
    '--help' ) echo "$USAGE";;
    'add'    ) add $(realpath "$2");;
    'menu'   ) menuadd;;
    'skip'   ) killffplay -TERM; notif "Skipping";;
    'pause'  ) killffplay -STOP; notif "Pausing" ;;
    'resume' ) killffplay -CONT; notif "Resuming";;
    'stop'   ) kill -TERM $DAEMON_PID;;
    'reset'  ) rm -f "$QUEUE"; notif "Removed fifo file $QUEUE";;
    *        ) echo "$USAGE" >&2; exit 1;;
esac
