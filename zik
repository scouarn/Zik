#!/usr/bin/sh

# Configuration
# (this is nly used by the file selection prompt)
ZIK_PATH="$HOME/Music"
ZIK_EXTENSIONS="wav\|mp3\|flac\|ogg"

# Temp files, change if you really need to.
ZIK_TMP="/tmp/zik"
QUEUE="$ZIK_TMP/fifo"
COVER="$ZIK_TMP/cover.png"


# Pid of the process is/will be playing
ZIK_PID=$(pidof -x $(basename $0) -o $$)
if [ -z "$ZIK_PID" ]; then
    ZIK_PID=$$
fi

# Write to fifo
add() {
    if [ -f "$1" ]; then
        # It has to running in background because the player
        # might not have started yet
        echo "$1" > "$QUEUE" &
        notify-send "Zik" "Added $1"
    elif [ -d "$1" ]; then
        notify-send "Zik" "This is a directory $1" 
    fi
}

# dmenu prompt to select audio file to add to queue
menuadd() {
    add "$(find "$ZIK_PATH/" -regex ".*\.\($ZIK_EXTENSIONS\)"  | # Find audio files
        awk -F '/' '{printf "%-60s%s\n", $NF, $0}'          | # Rewrite as 'file   fullpath'
        dmenu -i -l 30 -p "Choose audio file"               | # Prompt user
        sed 's#^\([^/]*\)\(.*\)$#\2#'                         # Extract back the fullpath
    )"
}


# Create temporary directory
if [ ! -d "$ZIK_TMP" ]; then
    mkdir "$ZIK_TMP"
fi

# Create the music queue as an actual fifo
if [ ! -p "$QUEUE" ]; then
    mkfifo "$QUEUE"
fi


USAGE="Usage: $0 [--help|add <file>|menu|skip|pause|resume|stop]
    Without any option, a dmenu prompt is opened to choose one.

    Options:
    --help      Print this message.
    add <file>  Add the file to the queue.
    menu        Open a menu to choose a file to add..
    skip        Go to next in queue.
    pause       Pause playback.
    resume      Resume playback.
    stop        Empty the queue and stop playing.
    reset       Remove the fifo file."
    #query       Print the status of what is beeing played."


# Prompt for option if none was given
if [ -z $1 ]; then
    OPTIONS="Menu Skip Play Pause Stop Reset"
    CHOICE=$(printf "%s\n" $OPTIONS |\
        dmenu -i -p "Zik action"    |\
        tr '[:upper:]' '[:lower:]'
    )
else 
    CHOICE=$1
fi

case "$CHOICE" in
    '--help' ) echo "$USAGE"; exit;;
    'add'    ) add $2;;
    'menu'   ) menuadd;;
    'skip'   ) kill -INT  $ZIK_PID; exit;;
    'pause'  ) kill -USR1 $ZIK_PID; exit;;
    'resume' ) kill -CONT $ZIK_PID; exit;;
    'stop'   ) kill -TERM $ZIK_PID; exit;;
    'reset'  ) rm -f "$QUEUE"; notify-send "Zik" "Removed to fifo file $QUEUE"; exit;;
    *        ) echo "$USAGE" >&2; exit 1;;
esac

# Stop if already running
# Wait the add/menuadd if their was one
if [ "$ZIK_PID" -ne $$ ]; then
    wait
    exit
fi

#   Open queue for reading : when doing read directly on $QUEUE the fifo is 
# opened then closed so other processes trying to write are blocked.
exec 3< "$QUEUE"
FFMPEG_PID=""

#   SIGSTOP and SIGCONT actually work pause/resume ffmpeg.
# I wanted to send SIGTSTP to zik for pausing but when spawn by dwm
# the signal isn't received for some reason.
# NOTE: the wait command is beeing interrupted when TSTP or CONT are received
#   by the shell script so the trap recall wait.
trap 'notify-send "Zik" "Skipping"; kill $FFMPEG_PID' INT
trap 'notify-send "Zik" "Pausing";  kill -STOP $FFMPEG_PID; wait $FFMPEG_PID' USR1 TSTP
trap 'notify-send "Zik" "Resuming"; kill -CONT $FFMPEG_PID; wait $FFMPEG_PID' CONT
trap 'notify-send "Zik" "Stopping"; kill $FFMPEG_PID; exit' TERM

# For each file in the queue do...
# Exit the loop when everything has been read.
while read -u 3 FILE; do
    [ -f "$FILE" ] || continue
    notify-send "Zik" "Now playing $FILE" 

    # Extract cover image and set as wallpaper
    ffmpeg -y -i "$FILE" -an -vcodec copy "$COVER" 2> /dev/null &&
        feh --no-fehbg --bg-fill "$COVER" 

    # Play it
    ffplay -nodisp -autoexit "$FILE" 2> /dev/null &
    FFMPEG_PID=$!
    wait $FFMPEG_PID
done

# Closing queue
notify-send "Zik" "Queue empty, stopping"
exec 3<&-
